name: CD with Gradle (Spring on AL2023)

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle Wrapper -> jar
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test
          ls -al build/libs

      - name: Pick latest jar as app.jar
        id: jar
        shell: bash
        run: |
          set -e
          JAR=$(ls -t build/libs/*.jar | head -1)
          echo "latest jar: $JAR"
          cp "$JAR" app.jar
          ls -al app.jar

      # ✅ 원격 디렉토리 보장
      - name: Ensure remote dir
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_KEY }}
          script: |
            mkdir -p /home/ec2-user/kitalk/spring

      - name: Upload app.jar via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_KEY }}
          source: "app.jar"
          target: "/home/ec2-user/kitalk/spring/app.jar" 

      - name: SSH & Deploy on EC2 (Amazon Linux 2023)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail

            cd /home/ec2-user/kitalk

            # Docker / compose plugin (AL2023)
            if ! command -v docker >/dev/null 2>&1; then
              sudo dnf update -y
              sudo dnf install -y docker
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker ec2-user || true
            fi
            if ! sudo docker compose version >/dev/null 2>&1; then
              sudo dnf install -y docker-compose-plugin
            fi

            # .env 채우기 (Secrets 필수)
            cat > .env <<'EOF'
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
            EOF

            # 외부 프로퍼티 존재 확인
            if [ ! -f resources/application-prod.properties ]; then
              echo "resources/application-prod.properties not found. Make sure it's present and mounted."
            fi

            # 업로드된 파일 확인
            ls -al /home/ec2-user/kitalk/spring/app.jar

            # 인프라(최초만) 시도
            sudo docker compose up -d mysql redis || true

            # Spring 빌드/기동
            sudo docker compose --profile spring up -d --build

            sudo docker compose ps
            sudo docker image prune -f || true
